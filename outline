- [ Interactive demo featuring vim manipulations, nethack, starwars, nyan ]
  - vim:
- Overview of what I hope to cover
- Catting a binary file can be dangerous!
  - [ Cat or head a file I know will produce what I want. ]
    . With a prepared terminal that got ': Esc ) 0', most terms seem
      less susceptible to this than I remember
  - Mention I had to prep the term for this case.
- Flow control with ^S and ^Q
  - stty for controlling this.
  [ demonstration:
      while : ; do echo $RANDOM; sleep 0.5; done
  ]
- ASCII / Ecma-6 / ISO-646
  - Comes from background of punchtape, teletypes (ttys)
    [ pictures of punch tape, line printers ]
  - How control characters are formed at the keyboard
  - Your computer understands Ctrl+Anything, but terms are much more
    limited
    [ show hex-based ascii table, with each pair of columns highlighted,
      and the replaceable graphic characters boxed.
      Also show column/row notation, with an example character
      highlighted. ]
    - The special DEL character, not with the other controls.
    - Control representations: ^X or C-x
    - other things can use control, like arrow keys, but it works very
      differently.
  - CR and LF (or NL)
    - meanings for a line printer
    - what gets sent by the keyboard, versus what the terminal sends to
      app, how to control with stty
      - Briefly explain pseudo terminal files
      - Normally line-buffered, tty lets you edit in-place, then sends
        on return.
  - shift out/in with ^N/^O
    - How to recover from catting a binary file: reset ^J
  - DEL/^? vs BS/^H, and stty
    - DEL's original meaning with punch tape, Ecma 6 § 6.5
    - BS = ^H is problematic for some apps, such as Emacs
    - some terminal emulators now autodetect what to send for BS
      based on stty.
    - quick diversion, to mention a few other things stty is
      useful for, such as raw and cooked mode, and how to redirect
      standard input from a different tty
    - Why terminal apps can screw up the stty settings
    - saving and restoring stty settings
  - Graphical effects using BS/^H or CR/^M
    - Ecma 6 § 7
    - [ man example ]
      - man man
      - man man | less (lose formatting, because no tty)
      - MAN_KEEP_FORMATTING=1 man man | less -R (get formatting again)
      - MAN_KEEP_FORMATTING=1 man man | cat -A | less (see control characters
      - explain the backspace notation
  - "composite" characters using BS
    [ note from relevant Ecma standard ]
- Why can't I do the man example directly to terminal? Because video
  terminals and emulators aren't like teletypes: they don't do
  overstrikes. What they use is escape sequences, like the ones we saw
  before.
- A focus on graphical rendition effects, especially color, in prompts
  - How to print escape sequences yourself
    - Mention that echo can do it, but it's not portable.
    - printf -- '%b' '\033...'
      - '\x1B' (C-style) is NOT portable.
  - Relation between ^[[3Xm, and RGB values.
  - bold effects (or not) on 8-color values
  - 16-color values (non-standard)
  - 256-color values (non-standard)
  - Note about shells' static buffers, and long-color values
- The terminfo database, a portable way to handle terminal differences
  - How to tell how many colors a terminal supports, and how to portably
    set the colors
  - The TERM environment variable
  - auto-updated cols and lines, keeps up with resizes.
  - terminfo(5) is where to find various features and descriptions
  - Ecma 48 is where to find standardized feature descriptions
  - other features of note:
    - application mode
    - keyboard transmit mode
    - special keys with modifiers
    - mouse (doesn't really communicate anything other than basic
      support, protocol has to be communicated elsewhere)
    - mouse testing example? -- printf '\033[?1000h'; STTY=$(stty -g); stty -echo -icanon min 1 time 0; cat -A; sleep 1; stty "$STTY"; printf '\033[?1000l'
    - what happens if mouse mode left on?
    - function keys. Refer to terminfo source doc's description of these.
  - ``Notice how many feature strings begin with "\E["...'' - explain
    the CSI sequence and how its end is detected.
  - What happens when my terminfo file isn't available on a remote
    machine
  - What happens when the terminfo file disagrees with how my terminal
    actually operates
  - Compiling custom terminfos with tic
    - Add a color whenever something gets made bold or underlined.
    - condense the example to a one-liner
  - termcap:
    - can communicate via env var (which can run out of space)
    - can't communicate conditionals (use 256-color setaf example)
    - uses 2-character labels, instead of arbitrary-length
- prompt-jobs.sh
  - Simple example
  - configuring .pjobsrc with tput commands
  - prompt-jobs: treating your existing complex prompt with respect.
- Feeling Overwhelmed? A summary of what we know so far:
  . (Everything everyone who uses terminals ought to know)
  - It's bad to cat binary files to the terminal, BUT we can recover
    with ^J reset ^J
  - Terminal frozen? Try ^Q! (And also try a term that deals gracefully
    with flow control, or defang it with stty in your .bashrc)
  - stty is great for a number of other things, too
    - summary list
  - Terminfo:
    - TERM tells apps how to do stuff
    - tput for portable controls
    - infocmp to find capabilities
    - "man 5 terminfo" to look them up
  - (Shameless plugs:)
    - Teseq is great for trying to figure out what your term is being
      asked to do
    - prompt-jobs.sh. Makes a colored prompt with built-in job list,
      easy!
- tmux/screen
  - Loss of connection
  - Multiple windows you can switch between
  - Split terminals
  - Setting up workspaces (my tmux, plines, or niwt examples)
  - pipe-pane example with teseq
  - Example showing teseq showing what an app sends to tmux, versus what
    tmux sends to the term (this is what I invented teseq for!)
    - Good opportunity to introduce script
  - Twice as many terminfo entries, twice as much opportunity for things
    to wrong...
  - Italics and tmux/screen
- introducing reseq
  - Using teseq and reseq together to provide terminal bug reproduction
    (don't spend much time here, who else needs to know that?!)
  - script -t for timing info
  - scriptreplay to play it back
  - Play initial section of wget demo, "auto-retries.seq"
  - ^C is safe - reseq restores the terminal first
  - Creating a simple interactive demo with script -t, teseq, and reseq.
    [ Do it using an interactive demo itself! ]
  - ttyrec


(At end, if there's time:)
- Other 7-bit Ecma encodings/ASCII variants, and which chars were
  allowed to change, which aren't. ISO 646 / Ecma 6
  - Did you ever visit a text documenton a web page, and it had funky
    characters, like ¥ or Ñ, where you had expected punctuation, like
    maybe backslashes? ...That was an ISO-646 / Ecma-6 variant.
  - example swapping to Japanese or Spanish 7-bit charsets, luit or vte.
  - ISO-IR
  - ISO 646 was the reason why C introduced trigraphs and words like
    "and" and "or".
- 8-bit ISO-8859 encodings, and Ecma-35 / ISO 2022
  - Most people know about "latin1". Do they know that an app can send
    codes to switch to another charset, or even swap the lower portion
    for another character set?
    [ diagram from ISO 2022 ]
    [ set of simple tools to invoke charsets to different areas, shift
    different areas into GL and GR. Ready printable that exercises GL
    and GR, and maybe all of G0 thru G3 as well. ]

- Final slides:
  - List of specifications and tools referenced.
  - Link to website with the examples I used.


/* vim:set sw=2 sts=2 et: */
