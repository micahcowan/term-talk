- Basics of tmux/screen
  . Demonstrate these manually
  - Loss of connection
  - Multiple windows you can switch between
    - The C-b or C-a prefix. Why C-a may not be best choice for
      emacs/bash users.
    - C-a a -> C-a
  - Split terminals
  - My manpage/infopage shortcuts
  - Setting up workspaces (my tmux, plines, or niwt examples)
- [ Interactive demo featuring vim manipulations, nethack, starwars, nyan:
    demos/ansi/all.sh ]
  - Provide links for where to telnet for starwars and nyan, and where
    to get 
- Terminal problems you can find yourself in
  - Catting a binary file can be dangerous!
    - [ pjobs-remove; cat demos/problems/binary ]
      . With a prepared terminal that got ': Esc ) 0', most terms seem
        less susceptible to this than I remember
    - Mention I had to prep the term for this case.
  - Flow control with ^S and ^Q
    - stty for controlling this.
    [ demonstration: demos/problems/infout ]
      Why a problem? Because you can easily type it without meaning to,
      and then assume your term froze.
    [ demonstration: vim and flow control; note: won't work with Emacs ]
      Note nano's response as well.
      Preventative measures given later.
  - stty -echo
  - Most of these, except flow control, solved with ^J reset ^J
- Pseudo-terminal files, every emulated terminal has one
  - what do I mean "emulated"? Originally, terminals were hardware. Just
    enough computing power to do what a terminal does, and connect via
    serial cable or what not.
  - Pseudo-terminals are pairs of files:
    - one file is used by the terminal to send characters as input to
      programs, and may not actually be accessible on the filesystem
      - terminal opens it, kernel constructs a new file descriptor;
        opening it again gives a completely different terminal pair
    - the other file is found on the filesystem, and if you write to it,
      it shows up graphically on the terminal.
    - More on these file pairs later
  - Example: echo Hello there > /dev/pts/XX
- Sending terminal controls with tput
  - tput examples: graphic rendition: bold, underline, standout, setaf,
    setab, sgr0
    [ Pre-recorded demo: demos/sgr/cmd.sh ]
  - tput examples, cmd output from one term going into another set in "raw" mode
    [ Interactive demo: demos/interact/tmux.sh ]
    - stty raw < $T  # Will explain this later
    - tput cdd1; printf a   # It did move down, but it also moved forward
    - printf 'a\b'  # Stays same place after printing 'a'
    - tput cdd1; printf 'a\b' # Works now!
    [ Interactive demo: demos/interact/tmux.sh ]
  - terminfo(5) is where to find various features and descriptions
  - The TERM environment variable
- ASCII / Ecma-6 / ISO-646
  - Comes from background of punchtape, teletypes (ttys)
  - Your computer understands Ctrl+Anything, but terms are much more
    limited
    [ show hex-based ascii table, with each pair of columns highlighted,
      and the replaceable graphic characters boxed.
      Also show column/row notation, with an example character
      highlighted. images/mjc-ascii-tables.{pdf,ods} ]
    - The special DEL character, not with the other controls.
    - Control representations: ^X or C-x
    - other things can use control, like arrow keys, but it works very
      differently.
  - Basic controls
    [ Demo of things like ^C, ^D, ^G, ^I, ^W, ^U, ^Z, ^\ ]
    Brief discussion of terminal buffering for ^W and ^U
  - meta key was used for setting the high bit of a typed byte; now more
    typically prefixes it with Esc. 
  - CR and LF (or NL)
    [ images/crlf.gif ]
    - meanings for a line printer
    - LF is usually called NL these days, which is a graphical
      terminal-oriented name. The LF designation is a teletype-oriented
      name.
    - what gets sent by the keyboard, versus what the terminal sends to
      app, how to control with stty
      - Briefly explain pseudo terminal files
      - Normally line-buffered, tty lets you edit in-place, then sends
        on return.
  - shift out/in with ^N/^O
    - Shift character sets in/out, most often used for DEC special
      characters (as seen in our previous munged-screen example)
  - DEL/^? vs BS/^H, and stty
    - DEL's original meaning with punch tape, Ecma 6 § 6.5
    - BS = ^H is problematic for some apps, such as Emacs
    - some terminal emulators now autodetect what to send for BS
      based on stty.
    - quick diversion, to mention a few other things stty is
      useful for, such as raw and cooked mode, and how to redirect
      standard input from a different tty.
    - Why terminal apps can screw up the stty settings
    - saving and restoring stty settings
  - Graphical effects using BS/^H or CR/^M
    - Ecma 6 § 7
    - [ man example ]
      - man man
      - man man | less (lose formatting, because no tty)
      - MAN_KEEP_FORMATTING=1 man man | less -R (get formatting again)
      - MAN_KEEP_FORMATTING=1 man man | cat -A | less (see control characters
      - explain the backspace notation
  - "composite" characters using BS
    [ note from relevant Ecma standard ]
- Why can't I do the man example directly to terminal? Because video
  terminals and emulators aren't like teletypes: they don't do
  overstrikes. What they use is escape sequences, like the ones we saw
  before.
- teseq:
  - tmux pipe-pane example with teseq, with prompt first, then vim or
    something
    [ Pre-recorded demo ]
  - Example showing teseq showing what an app sends to tmux, versus what
    tmux sends to the term (this is what I invented teseq for!)
    - Good opportunity to introduce script
- introducing reseq
  - Using teseq and reseq together to provide terminal bug reproduction
    (don't spend much time here, who else needs to know that?!)
  - script -t for timing info
  - scriptreplay to play it back
  - Play initial section of wget demo, "auto-retries.seq"
  - ^C is safe - reseq restores the terminal first
  - Creating a simple interactive demo with script -t, teseq, and reseq.
    [ Do it using an interactive demo itself! ]
    - Demonstrate editing out pauses (and how to find them), mistakes,
      adding delays, comments, disabling blocks by indenting, 
  - ttyrec
- Terminfo database/infocmp
  - auto-updated cols and lines, keeps up with resizes.
  - Ecma 48 is where to find standardized feature descriptions
  - other features of note:
    - application mode
    - keyboard transmit mode
    - function keys.
    - special keys with modifiers (refer to terminfo source doc's descr)
    - mouse (doesn't really communicate anything other than basic
      support, protocol has to be communicated elsewhere)
    - mouse testing example? -- [ printf '\033[?1000h'; STTY=$(stty -g); stty -echo -icanon min 1 time 0; cat -A; sleep 1; stty "$STTY"; printf '\033[?1000l' ]
    - what happens if mouse mode left on?
  - ``Notice how many feature strings begin with "\E["...'' - explain
    the CSI sequence and how its end is detected.
  - What happens when my terminfo file isn't available on a remote
    machine
  - What happens when the terminfo file disagrees with how my terminal
    actually operates
  - tmux/screen: Twice as many terminfo entries, twice as much
    opportunity for things to wrong...
  - Compiling custom terminfos with tic
    - Add a color whenever something gets made bold or underlined.
    - condense the example to a one-liner
  - termcap:
    - can communicate via env var (which can run out of space)
    - can't communicate conditionals (use 256-color setaf example)
    - uses 2-character labels, instead of arbitrary-length


(At end, if there's time:)
- prompt-jobs.sh
  [ Interactive demo for this ]
  - Simple example
  - configuring .pjobsrc with tput commands
  - prompt-jobs: treating your existing complex prompt with respect.
- Other 7-bit Ecma encodings/ASCII variants, and which chars were
  allowed to change, which aren't. ISO 646 / Ecma 6
  - Did you ever visit a text documenton a web page, and it had funky
    characters, like ¥ or Ñ, where you had expected punctuation, like
    maybe backslashes? ...That was an ISO-646 / Ecma-6 variant.
  - example swapping to Japanese or Spanish 7-bit charsets, luit or vte.
  - ISO-IR
  - ISO 646 was the reason why C introduced trigraphs and words like
    "and" and "or".
- 8-bit ISO-8859 encodings, and Ecma-35 / ISO 2022
  - Most people know about "latin1". Do they know that an app can send
    codes to switch to another charset, or even swap the lower portion
    for another character set?
    [ diagram from ISO 2022 ]
    [ set of simple tools to invoke charsets to different areas, shift
    different areas into GL and GR. Ready printable that exercises GL
    and GR, and maybe all of G0 thru G3 as well. ]
(
- More on color, and using them in prompts (without prompt-jobs)
  [ Use reseq --replay example for this ]
  - Use infocmp or tput to determine how many colors are supported.
  - How to print escape sequences yourself
    - Mention that echo can do it, but it's not portable.
    - printf -- '%b' '\033...'
      - '\x1B' (C-style) is easier but NOT portable.
  - Relation between ^[[3Xm, and RGB values.
  - bold effects (or not) on 8-color values
  - 16-color values (non-standard)
  - 256-color values (non-standard)
  - Note about shells' static buffers, and long-color values

- Final slides:
  - Summary
  - List of specifications and tools referenced.
  - Link to website with the examples I used.


/* vim:set sw=2 sts=2 et: */
